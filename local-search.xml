<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>argparse模块详解：深度学习</title>
    <link href="/2024/11/07/argparse%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/11/07/argparse%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3%EF%BC%9A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="命令行程序：argparse"><a href="#命令行程序：argparse" class="headerlink" title="命令行程序：argparse"></a>命令行程序：argparse</h1><p>基于命令行的程序中，经常需要用户输入一些命令行参数，以实现程序级别的复用。比如在深度学习中经常使用argparse模块解析命令行参数。</p><p>命令行参数存在哪：sys.argv变量中，这个变量是一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br>args = sys.argv<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type:&quot;</span>,<span class="hljs-built_in">type</span>(args))<br><span class="hljs-built_in">print</span>(args)<br></code></pre></td></tr></table></figure><p>假如我们想让用户在命令行程序中输入用户名和密码：</p><blockquote><p>python test.py –user yinjinhui –passwd 123456</p></blockquote><blockquote><p>type: &lt;class ‘list’&gt;<br>[‘test.py’, ‘–user’, ‘yinjinhui’, ‘–passwd’, ‘123456’]</p></blockquote><p>可以看到所有的参数都存放在了sys.argv列表里，但是列表存储的是参数的原始形态，假如我们需要获取用户名，就需要用索引访问列表，在参数比较多的时候非常的不方便。在用户改变输入顺序时也会产生错误，甚至发生列表访问越界。那么python标准库提供了一种更强的解析命令行参数的方法。<code>argparse模块</code></p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 现在有一个深度学习的训练脚本。需要用户指定训练的模型、训练的轮数、学习率、批量大小等参数。这些参数都是通过命令行传入的。例如：</span><br><span class="hljs-comment"># 这些参数有model,epoch,lr,batch_size</span><br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parsearg</span>():<br>    <span class="hljs-comment">#首先创建一个ArgumentParser对象</span><br>    parser = argparse.ArgumentParser(<br>        prog=<span class="hljs-string">&quot;trashingsh&quot;</span>,<span class="hljs-comment">#程序名</span><br>        description=<span class="hljs-string">&#x27;training&#x27;</span>,<span class="hljs-comment">#脚本的描述信息</span><br>        epilog=<span class="hljs-string">&quot;copyright1.0&quot;</span>)<span class="hljs-comment">#结束语</span><br><br>    <span class="hljs-comment">#1重要方法add_argument() 指定程序所需的参数，包括位置参数，可选参数，参数的默认值，参数的类型，参数的取值范围等</span><br>    <span class="hljs-comment">#这是一个位置参数，一般情况下必须传入，但是指定了默认值以后可以不传入,以-开头的参数是可选参数，其他是未知参数</span><br>    parser.add_argument(<span class="hljs-string">&#x27;model&#x27;</span>,default=<span class="hljs-string">&#x27;resnet&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;model name [default: resnet]&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--epoch&#x27;</span>,default=<span class="hljs-number">200</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,choices=[<span class="hljs-number">100</span>,<span class="hljs-number">200</span>],<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;number of training epoch&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--lr&#x27;</span>,default=<span class="hljs-number">0.001</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;learning rate&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--batch_size&#x27;</span>,<span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,required=<span class="hljs-literal">True</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;traing batch_size must give&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;--usenormal&quot;</span>,action=<span class="hljs-string">&#x27;store_true&#x27;</span>,default=<span class="hljs-literal">False</span>,<span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;use normal infm&#x27;</span>)<br>    <span class="hljs-comment">#重要方法parse_args()，返回解析后的namespace对象</span><br>    args = parser.parse_args()<br><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;atart traing...&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model=<span class="hljs-subst">&#123;args.model&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch=<span class="hljs-subst">&#123;args.epoch&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;lr=<span class="hljs-subst">&#123;args.lr&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;batch_size=<span class="hljs-subst">&#123;args.batch_size&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;usenormal=<span class="hljs-subst">&#123;args.usenormal&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    parsearg()<br></code></pre></td></tr></table></figure><p>case1:正常输入了参数运行程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python test.py resnet --epoch 100 --lr 0.01 --batch_size 12 --usenormal<br></code></pre></td></tr></table></figure><blockquote><p>atart traing…<br>model&#x3D;resnet<br>epoch&#x3D;100<br>lr&#x3D;0.01<br>batch_size&#x3D;12<br>usenormal&#x3D;True</p></blockquote><p>case2:只查看参数的帮助信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python test.py -h         <br></code></pre></td></tr></table></figure><p>​       </p><blockquote><p>usage: trashingsh [-h] [–epoch {100,200}] [–lr LR] –batch_size BATCH_SIZE [–usenormal] model</p><p>training</p><p>positional arguments:<br>model                 model name [default: resnet]</p><p>optional arguments:<br>-h, –help            show this help message and exit<br>–epoch {100,200}     number of training epoch<br>–lr LR               learning rate<br>–batch_size BATCH_SIZE<br>                   traing batch_size must give<br>–usenormal           use normal infm</p><p>copyright1.0</p></blockquote><p>case3:参数没有正确输入，argparse会提示错误信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python test.py<br></code></pre></td></tr></table></figure><blockquote><p>usage: trashingsh [-h] [–epoch {100,200}] [–lr LR] –batch_size BATCH_SIZE [–usenormal] model<br>trashingsh: error: the following arguments are required: model, –batch_size</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Py</category>
      
    </categories>
    
    
    <tags>
      
      <tag>py</tag>
      
      <tag>DL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/07/hello-world/"/>
    <url>/2024/11/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p><img src="/../imgs/image-20241107214829338.png"></p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
